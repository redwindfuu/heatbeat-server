const http = require("http");
require("dotenv").config();
const { PORT ,DB } = require("../app/configs/config");
// start server
const { connect } = require("../app/configs/mongoose");

connect()
  .then(() => {
    /**
     * Get port from environment and store in Express.
     */

    var app = require("../app");
    var debug = require("debug")("heatbeat-server:server");
    const port = normalizePort(PORT || "3000");
    const server = http.createServer(app);
    app.set("port", port);

    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
    console.log("Server is running on port " + port);
    console.log("Connect DB successfully!");

    function onListening() {
      const addr = server.address();
      const bind =
        typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
      debug("Listening on " + bind);
    }
  })
  .catch((err) => {
    console.log(DB.url);
    console.log("Connect DB failled!", err);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
